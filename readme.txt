================================
Telegram Channel Analyzer Bot
================================

Этот проект представляет собой Telegram-бота, который автоматически сохраняет все текстовые сообщения из указанного канала в базу данных PostgreSQL. Он использует Google Gemini AI для анализа сохраненных сообщений и создания ежемесячных отчетов о деятельности в канале.

----------------
Особенности
----------------
- **Автоматическое сохранение**: Бот сохраняет текст каждого нового поста из привязанного канала в базу данных.
- **Анализ по команде**: При получении команды /start от пользователя, бот анализирует сообщения за последние 30 дней и отправляет отчет в личный чат.
- **Ежемесячные отчеты**: Автоматически, каждые 30 дней, бот формирует аналитический отчет и отправляет его в канал.
- **Интеграция с AI**: Использует модель "gemini-2.0-flash" от Google для анализа тем, достижений и выработки рекомендаций.
- [cite_start]**Контейнеризация**: Проект полностью настроен для запуска в Docker-контейнере[cite: 1].

----------------
Технологии
----------------
- [cite_start]**Язык**: Python 3.12.9 [cite: 1]
- [cite_start]**Telegram Bot Framework**: Aiogram [cite: 4]
- [cite_start]**База данных**: PostgreSQL (взаимодействие через библиотеку Asyncpg [cite: 4])
- [cite_start]**AI Модель**: Google Generative AI [cite: 4]
- **Окружение**: Docker

----------------
Настройка и запуск
----------------

1.  **Клонируйте репозиторий**
    ```
    git clone <адрес_вашего_репозитория>
    cd <папка_с_проектом>
    ```

2.  **Настройте переменные окружения**
    Создайте файл `.env` в корневой директории проекта и заполните его по аналогии с примером ниже, используя ваши данные:
    ```env
    GEN_API='ВАШ_API_КЛЮЧ_GEMINI'
    BOT_TOKEN='ВАШ_ТОКЕН_TELEGRAM_БОТА'
    DB_HOST=host.docker.internal  # Используйте это значение при запуске через Docker Desktop
    DB_PORT=5432
    DB_USER=postgres
    DB_PASSWORD=ваш_пароль_от_бд
    DB_NAME=messages
    CHANNEL_ID=ID_ВАШЕГО_КАНАЛА  # Например, -100123456789
    ```

3.  **Настройте бота в Telegram**
    - Добавьте вашего бота в администраторы канала, которому вы хотите дать доступ к сообщениям.

4.  **Сборка и запуск Docker-контейнера**
    Убедитесь, что у вас запущен Docker. Выполните следующие команды в терминале:

    - **Сборка образа:**
      ```shell
      docker build -t group_bot .
      ```
    - **Запуск контейнера:**
      ```shell
      docker run --rm group_bot
      ```

----------------
Структура файлов
----------------
- **main.py**: Главный файл. Инициализирует базу данных, запускает бота и фоновую задачу для ежемесячных отчетов.
- **db.py**: Модуль для работы с базой данных PostgreSQL. Содержит функции для подключения, инициализации таблиц, сохранения и получения сообщений.
- **genai.py**: Модуль для взаимодействия с Google Gemini AI. Отвечает за отправку запросов и получение аналитических отчетов.
- [cite_start]**Dockerfile**: Инструкции для сборки Docker-образа приложения[cite: 1].
- [cite_start]**requirements.txt**: Список необходимых Python-библиотек[cite: 4].
- [cite_start]**.env**: Файл конфигурации для хранения секретных ключей и настроек[cite: 3].

----------------
Использование
----------------
- После запуска бот начнет автоматически сохранять все новые текстовые посты из канала, указанного в `CHANNEL_ID`.
- Чтобы получить анализ сообщений за последние 30 дней, просто отправьте боту личное сообщение с командой `/start`.
- Каждые 30 дней бот будет автоматически публиковать сгенерированный отчет в вашем канале.
